name: CI/CD - Despliegue a Produccion
on:
  # El pipeline se ejecutará únicamente cuando haya un push a la rama 'main'
  push:
    branches: [main]

jobs:
  desplegar-produccion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        # Manejo de credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # CI: BUILD Y PUSH DE LA IMAGEN
      - name: Docker Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag and Push Docker image
        # La etiqueta 'pr-n' indica que es la ultima version de main
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pipeline-cicd
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Creacion del repositorio ECR si no existe
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
          
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # CD: DESPLIEGUE CON TERRAFORM
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.3.0"

      - name: Terraform Init
        # Instalar dependencias 
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        # Validar formato y sintaxis
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan & Apply
        # Se usará la etiqueta 'latest' en la definicion de tarea de ECS
        env:
          TF_VAR_run_id: ${{ github.run_id }} 
          TF_VAR_image_tag: ${{ github.sha }} 
          TF_VAR_vpc_id: ${{ secrets.VPC_ID }}
          TF_VAR_public_subnets: ${{ secrets.PUBLIC_SUBNETS }}
          TF_VAR_private_subnets: ${{ secrets.PRIVATE_SUBNETS }}
          TF_VAR_ecr_url: ${{ steps.login-ecr.outputs.registry }}/pipeline-cicd
        run: |
          # Desplegar infraestructura (Apply)
          terraform plan -out=plan.out
          terraform apply -auto-approve plan.out
        working-directory: ./terraform